# -*- coding: utf-8 -*-
"""exercicio_busca_ia

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Wm7bB8dXabEh4JGo0PWQZhC28dWv_SI7

GRAFO
"""

class Vertice:
 def __init__(self, rotulo, distancia_objetivo):
  self.rotulo = rotulo
  self.visitado = False
  self.distancia_objetivo = distancia_objetivo
  self.adjacentes = []

 def adiciona_adjacente(self, adjacente):
  self.adjacentes.append(adjacente)

 def mostra_adjacentes(self):
   for i in self.adjacentes:
    print(i.vertice.rotulo, i.custo)

class Adjacente:
  def __init__(self, vertice, custo):
    self.vertice = vertice
    self.custo = custo
    self.distancia_aestrela = vertice.distancia_objetivo + self.custo

class Grafo:
  portouniao = Vertice('Porto Uniao', 203)
  paulofrontin = Vertice('Paulo Frontin', 172)
  canoinhas = Vertice('Canoinhas', 141)
  tresbarras = Vertice('Tres Barras', 131)
  saomateusdosul = Vertice('Sao Mateus do Sul ', 123)
  irati = Vertice('Irati', 139)
  curitiba = Vertice('Curitiba', 0)
  palmeira = Vertice('Palmeira', 59)
  mafra = Vertice('Mafra', 94)
  campolargo = Vertice('Campo Largo', 27)
  balsanova = Vertice('Balsa Nova', 41)
  lapa = Vertice('Lapa', 74)
  tijucasdosul = Vertice('Tijucas do Sul', 56)
  araucaria = Vertice('Araucaria', 23)
  saojosedospinhais = Vertice('Sao Jose dos Pinhais', 13)
  contenda = Vertice('Contenda', 39)

  portouniao.adiciona_adjacente(Adjacente(paulofrontin, 46))
  portouniao.adiciona_adjacente(Adjacente(canoinhas, 78))
  portouniao.adiciona_adjacente(Adjacente(saomateusdosul, 87))

  paulofrontin.adiciona_adjacente(Adjacente(portouniao, 46))
  paulofrontin.adiciona_adjacente(Adjacente(irati, 75))

  irati.adiciona_adjacente(Adjacente(palmeira, 75))
  irati.adiciona_adjacente(Adjacente(saomateusdosul, 57))
  irati.adiciona_adjacente(Adjacente(paulofrontin, 75))

  saomateusdosul.adiciona_adjacente(Adjacente(portouniao, 87))
  saomateusdosul.adiciona_adjacente(Adjacente(irati, 57))
  saomateusdosul.adiciona_adjacente(Adjacente(palmeira, 77))
  saomateusdosul.adiciona_adjacente(Adjacente(tresbarras, 43))
  saomateusdosul.adiciona_adjacente(Adjacente(lapa, 60))

  canoinhas.adiciona_adjacente(Adjacente(portouniao, 78))
  canoinhas.adiciona_adjacente(Adjacente(tresbarras, 12))
  canoinhas.adiciona_adjacente(Adjacente(mafra, 66))

  tresbarras.adiciona_adjacente(Adjacente(saomateusdosul, 43))
  tresbarras.adiciona_adjacente(Adjacente(canoinhas, 12))

  palmeira.adiciona_adjacente(Adjacente(irati, 75))
  palmeira.adiciona_adjacente(Adjacente(saomateusdosul, 77))
  palmeira.adiciona_adjacente(Adjacente(campolargo, 55))

  mafra.adiciona_adjacente(Adjacente(canoinhas, 66))
  mafra.adiciona_adjacente(Adjacente(tijucasdosul, 99))
  mafra.adiciona_adjacente(Adjacente(lapa, 57))

  lapa.adiciona_adjacente(Adjacente(saomateusdosul, 60))
  lapa.adiciona_adjacente(Adjacente(mafra, 57))
  lapa.adiciona_adjacente(Adjacente(contenda, 26))

  contenda.adiciona_adjacente(Adjacente(lapa, 26))
  contenda.adiciona_adjacente(Adjacente(balsanova, 19))
  contenda.adiciona_adjacente(Adjacente(araucaria, 18))

  tijucasdosul.adiciona_adjacente(Adjacente(mafra, 99))
  tijucasdosul.adiciona_adjacente(Adjacente(saojosedospinhais, 49))

  araucaria.adiciona_adjacente(Adjacente(contenda, 18))
  araucaria.adiciona_adjacente(Adjacente(curitiba, 37))

  balsanova.adiciona_adjacente(Adjacente(contenda, 19))
  balsanova.adiciona_adjacente(Adjacente(campolargo, 22))
  balsanova.adiciona_adjacente(Adjacente(curitiba, 51))

  saojosedospinhais.adiciona_adjacente(Adjacente(curitiba, 15))
  saojosedospinhais.adiciona_adjacente(Adjacente(tijucasdosul, 49))

  campolargo.adiciona_adjacente(Adjacente(palmeira, 55))
  campolargo.adiciona_adjacente(Adjacente(balsanova, 22))
  campolargo.adiciona_adjacente(Adjacente(curitiba, 29))

  curitiba.adiciona_adjacente(Adjacente(campolargo, 29))
  curitiba.adiciona_adjacente(Adjacente(saojosedospinhais, 15))
  curitiba.adiciona_adjacente(Adjacente(araucaria, 37))
  curitiba.adiciona_adjacente(Adjacente(balsanova, 51))

grafo = Grafo()

grafo.portouniao.mostra_adjacentes()

grafo.curitiba.mostra_adjacentes()

import numpy as np
class VetorOrdenado:

  def __init__(self, capacidade):
    self.capacidade = capacidade
    self.ultima_posicao = -1
    # Mudança no tipo de dados
    self.valores = np.empty(self.capacidade, dtype=object)

  # Referência para o vértice e comparação com a distância para o objetivo
  def insere(self, adjacente):
    if self.ultima_posicao == self.capacidade - 1:
      print('Capacidade máxima atingida')
      return
    posicao = 0
    for i in range(self.ultima_posicao + 1):
      posicao = i
      if self.valores[i].distancia_aestrela > adjacente.distancia_aestrela:
        break
      if i == self.ultima_posicao:
        posicao = i + 1
    x = self.ultima_posicao
    while x >= posicao:
      self.valores[x + 1] = self.valores[x]
      x -= 1
    self.valores[posicao] = adjacente
    self.ultima_posicao += 1

  def imprime(self):
    if self.ultima_posicao == -1:
      print('O vetor está vazio')
    else:
      for i in range(self.ultima_posicao + 1):
        print(i, ' - ', self.valores[i].vertice.rotulo, ' - ',
              self.valores[i].custo, ' - ',
              self.valores[i].vertice.distancia_objetivo, ' - ',
              self.valores[i].distancia_aestrela)

class AEstrela:
  def __init__(self, objetivo):
    self.objetivo = objetivo
    self.encontrado = False

  def buscar(self, atual):
    print('------------------')
    print('Atual: {}'.format(atual.rotulo))
    atual.visitado = True

    if atual == self.objetivo:
      self.encontrado = True
    else:
      vetor_ordenado = VetorOrdenado(len(atual.adjacentes))
      for adjacente in atual.adjacentes:
        if adjacente.vertice.visitado == False:
          adjacente.vertice.visitado = True
          vetor_ordenado.insere(adjacente)
      vetor_ordenado.imprime()

      if vetor_ordenado.valores[0] != None:
        self.buscar(vetor_ordenado.valores[0].vertice)

busca_aestrela = AEstrela(grafo.curitiba)
busca_aestrela.buscar(grafo.portouniao)